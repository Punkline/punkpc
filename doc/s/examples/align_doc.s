# --- Alignment Tool
# Similar to the '.align' directive, but works by emitting '00' bytes
# - this avoids issues with relative label evaluations


# --- Updates:

# version 0.0.1
# - added to punkpc module library


# --- Example use of the align module:

.include "punkpc.s"
punkpc align
# Use the 'punkpc' statement to load this module, or include the module file directly



# The assembler can align its program counter to a power of 2 with the .align directive
# ... however, this causes the program counter location to become unevaluable after the fact



show_errors = 0
# set this to 1 to display the following error:

.if show_errors
  0:
  .byte 1, 2, 3  # unaligned byte count, 3/4
  .align 2       # word alignment inserts a blank byte
  1:

  .if (1b - 0b) == 4    # This .if statement requires immediate evaluation...
    .long 1
  .else
    .long 0
  .endif
.endif

# In the above, we use '.align' to align the program counter
# ... but the expression made by the labels (1b - 0b) can't be evaluated until the assembly ends




# --- RELATIVE ALIGNMENT ---
# To get around this, the 'align' macro emits bytes relative to the current section
# - it does this by referencing a starting point generated by the 'punkpc' library object

0:
  .byte 1, 2, 3
  align 2
1:

.if (1b - 0b) == 4
  .long 1
.else
  .long 0
.endif
# >>> 1
# Now the expression is safe to use in .if statements
# - this basically just circumvents the unused linker feature to prevent obscurring the PC


# --- Module attributes:

# --- Class Properties ---
# --- _align.__start - a copy of the '_punkpc' library object label
# --- align.default - setting this will change the default bit alignment size

# --- Class Methods ---
# --- align  exp
# Align the program counter in the current section using a power of 2, 'exp'
# 'exp' - accepts values up to '15'
# - 0 is 1-bytealignment
# - 1 is 2-byte short alignment
# - 2 is 4-byte word alignment (default)
# - 3 is 8-byte alignment
# - 4 is 16-byte alignment
# - etc...

# --- align.to  exp, label
# This version of align accepts a base offset in the form of a label
# 'label' can be used to override the default '_align.__start' base label




